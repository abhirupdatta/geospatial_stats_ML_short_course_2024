RFGLS_est <- RFGLS_estimate_spatial(unname(as.matrix(pl.df.in[,c("x","y"),drop=F])),
pl.df.in$richness_species_vascular,
matrix(pl.df.in$temp,ncol=1), ntree = 500, nthsize = 20,param_estimate = T)
RFGLS_mean_pred <- RFGLS_predict(RFGLS_est,matrix(pl.df$temp,ncol=1))
RFGLS_sp_pred <- RFGLS_predict_spatial(RFGLS_est,
unname(as.matrix(pl.df[,c("x","y"),drop=F])),matrix(pl.df$temp,ncol=1))
rmse(pl.df.out$richness_species_vascular,RFGLS_sp_pred$prediction[index])
rmse(pl.df.out$richness_species_vascular,RFGLS_mean_pred$predicted[index])
#
rfgls_loess_10 <- loess(RFGLS_mean_pred$predicted ~ pl.df$temp, span=0.5)
#
plot(pl.df$climate_bio1_average,pl.df$richness_species_vascular,xlab="temperature",ylab="log(richness)")
lines(sort(pl.df$climate_bio1_average),rfgls_loess_10$fitted[order(pl.df$climate_bio1_average)],col="red",lwd=2)
set.seed(1)
RFGLS2_est <- RFGLS_estimate_spatial(unname(as.matrix(pl.df.in[,c("x","y")])),
pl.df.in$richness_species_vascular,
unname(as.matrix(pl.df.in[,c("temp","y")])), ntree = 200, nthsize = 20,param_estimate = T)
RFGLS2_mean_pred <- RFGLS_predict(RFGLS2_est,unname(as.matrix(pl.df[,c("temp","y")])))
RFGLS2_sp_pred <- RFGLS_predict_spatial(RFGLS2_est,
unname(as.matrix(pl.df[,c("x","y")])),unname(as.matrix(pl.df[,c("temp","y")])))
rmse(pl.df.out$richness_species_vascular,RFGLS2_sp_pred$prediction[index])
set.seed(1)
RF_loc_est <- randomForest(richness_species_vascular ~ temp + y + x, data=pl.df.in)
RF_loc_predict <- predict(RF_loc_est, pl.df)
rmse(pl.df.out$richness_species_vascular,RF_loc_predict[index])
## spRF ##
set.seed(1)
X=cbind(unname(matrix(pl.df$temp,ncol=1)),distance_matrix[,-index])
dimnames(X)=NULL
sprf_est=randomForest(X[-index,],pl.df.in$richness_species_vascular)
spRF_predict <- predict(sprf_est, newdata=X)
rmse(pl.df.out$richness_species_vascular,spRF_predict[index])
## Mean prediction error ##
df1=data.frame(fold=1,Metric="RMSE",Method=c("LM","spLM","RF","RFGLS"),
RMSE=round(c(rmse(pl.df.out$richness_species_vascular,lm_pred[index]),
rmse(pl.df.out$richness_species_vascular,br.mean.pred$prediction[index]),
rmse(pl.df.out$richness_species_vascular,RF_predict[index]),
rmse(pl.df.out$richness_species_vascular,RFGLS_mean_pred$predicted[index])),2))
## Spatial prediction error ##
df2=data.frame(fold=1,Metric="RMSPE",Method=c("LM","spLM","spLM2","RF","RFGLS","RFGLS2","RFloc","spRF"),
RMSE=round(c(rmse(pl.df.out$richness_species_vascular,lm_pred[index]),
rmse(pl.df.out$richness_species_vascular,br.pred$prediction[index]),
rmse(pl.df.out$richness_species_vascular,br2.pred$prediction[index]),
rmse(pl.df.out$richness_species_vascular,RF_predict[index]),
rmse(pl.df.out$richness_species_vascular,RFGLS_sp_pred$prediction[index]),
rmse(pl.df.out$richness_species_vascular,RFGLS2_sp_pred$prediction[index]),
rmse(pl.df.out$richness_species_vascular,RF_loc_predict[index]),
rmse(pl.df.out$richness_species_vascular,spRF_predict[index])),2))
rbind(df1,df2)
## Mean prediction error ##
df1=data.frame(fold=1,Metric="mean",Method=c("LM","spLM","RF","RFGLS"),
RMSE=round(c(rmse(pl.df.out$richness_species_vascular,lm_pred[index]),
rmse(pl.df.out$richness_species_vascular,br.mean.pred$prediction[index]),
rmse(pl.df.out$richness_species_vascular,RF_predict[index]),
rmse(pl.df.out$richness_species_vascular,RFGLS_mean_pred$predicted[index])),2))
## Spatial prediction error ##
df2=data.frame(fold=1,Metric="spatial",Method=c("LM","spLM","spLM2","RF","RFGLS","RFGLS2","RFloc","spRF"),
RMSE=round(c(rmse(pl.df.out$richness_species_vascular,lm_pred[index]),
rmse(pl.df.out$richness_species_vascular,br.pred$prediction[index]),
rmse(pl.df.out$richness_species_vascular,br2.pred$prediction[index]),
rmse(pl.df.out$richness_species_vascular,RF_predict[index]),
rmse(pl.df.out$richness_species_vascular,RFGLS_sp_pred$prediction[index]),
rmse(pl.df.out$richness_species_vascular,RFGLS2_sp_pred$prediction[index]),
rmse(pl.df.out$richness_species_vascular,RF_loc_predict[index]),
rmse(pl.df.out$richness_species_vascular,spRF_predict[index])),2))
rbind(df1,df2)
df=read.csv("../data/colocation_hourly.csv",header = T) %>%
mutate(Time=as.POSIXct(LST))
df.long = df %>%
select(Time,PM25_raw,PM25_MDE) %>%
pivot_longer(-Time,names_to = 'Series',values_to="value")
ggplot(df.long,aes(x=Time,y=value,col=Series),linewidth=1) +
geom_path() +
scale_color_manual(values = c("#E76BF3","#619CFF")) +
ylab('PM25 in mu g m^-3')
df.long = df %>%
select(Time,PM25_raw,PM25_MDE) %>%
pivot_longer(-Time,names_to = 'Series',values_to="value")
ggplot(df.long,aes(x=Time,y=value,col=Series),linewidth=1) +
geom_path() +
scale_color_manual(values = c("#E76BF3","#619CFF")) +
ylab('PM25 in mu g m^-3')
ggplot(df,aes(x=PM25_MDE,y=PM25_raw),linewidth=1) +
geom_point()
df.in=df[1:288,]
df.out=df[337:384,]
df.all=rbind(df.in,df.out)
l=lm(PM25_raw ~ PM25_MDE, data=df.in)
df.all$lmfit=predict(l,newdata=df.all)
p=pacf(df.all$PM25_raw-df.all$lmfit)
r=randomForest(PM25_raw ~ PM25_MDE, data=df.in)
df.all$rffit=predict(r,newdata=df.all)
y=df.in$PM25_raw
x=1*unname(as.matrix(df.in[,c("PM25_MDE"),drop=F],ncol=1))
X=1*unname(as.matrix(df.all[,c("PM25_MDE"),drop=F],ncol=1))
set.seed(1)
RFGLS <- RFGLS_estimate_timeseries(y, x, ntree = 500, param_estimate = T, lag_params = p$acf[1],
nthsize = 20)
RFGLS_predict_temp_unknown <- RFGLS_predict(RFGLS,X)
df.all$rfglsfit=RFGLS_predict_temp_unknown$predicted
rmse(df.all$lmfit[-(1:288)],df.all$PM25_raw[-(1:288)])
rmse(df.all$rffit[-(1:288)],df.all$PM25_raw[-(1:288)])
rmse(df.all$rfglsfit[-(1:288)],df.all$PM25_raw[-(1:288)])
df.all=df.all %>%
mutate(set=c(rep('train',288),rep('test',48)),
PM25_raw_fit_LM=lmfit,PM25_raw_fit_RF=rffit,PM25_raw_fit_RFGLS=rfglsfit) %>%
select(Time,set,PM25_raw,PM25_MDE,PM25_raw_fit_LM,PM25_raw_fit_RF,PM25_raw_fit_RFGLS)
df.long=df.all %>%
pivot_longer(-c(Time,set),names_to="Series")
ggplot(data=df.long %>% dplyr::filter(set=="train"),aes(x=Time,y=value,col=Series)) +
facet_grid(. ~ set,scales = "free_x") +
geom_path() +
theme(axis.text.x=element_text(angle=45,vjust = .5)) +
xlab('Time') +
ylab('PM25 in mu g m^-3') +
scale_color_manual(values = c("#E76BF3","#619CFF", "#00BF7D","#F8766D","maroon"))
ggplot(data=df.long %>% dplyr::filter(set=="test"),aes(x=Time,y=value,col=Series)) +
facet_grid(. ~ set,scales = "free_x") +
geom_path() +
theme(axis.text.x=element_text(angle=45,vjust = .5)) +
xlab('Time') +
ylab('PM25 in mu g m^-3') +
scale_color_manual(values = c("#E76BF3","#619CFF", "#00BF7D","#F8766D","maroon"))
## trying AR(2) model
set.seed(1)
RFGLS2 <- RFGLS_estimate_timeseries(y, x, ntree = 500, param_estimate = T, lag_params = c(p$acf[1],p$acf[2]),
nthsize = 20)
RFGLS2_predict_temp_unknown <- RFGLS_predict(RFGLS2,X)
df.all$PM25_raw_fit_RFGLS2=RFGLS2_predict_temp_unknown$predicted
plot(df.all$PM25_raw_fit_RFGLS,df.all$PM25_raw_fit_RFGLS2,xlab="RFGLS AR(1) fit",ylab="RFGLS AR(2) fit")
abline(a=0,b=1,col="red")
## creating a normalized time variable
df$normtime=(1:nrow(df))/24
df.in=df[1:288,]
df.out=df[337:384,]
df.all=rbind(df.in,df.out)
y=df.in$PM25_raw
x=1*unname(as.matrix(df.in[,c("PM25_MDE"),drop=F],ncol=1))
coords=cbind(1,unname(as.matrix(df.in[,c("normtime"),drop=F]))) ## making timepoints into 2-dimensional spatial coordinates
coords.all=1*unname(as.matrix(df.all[,c("normtime"),drop=F],ncol=1))
X=1*unname(as.matrix(df.all[,c("PM25_MDE"),drop=F],ncol=1))
set.seed(1)
RFGLS.sp <- RFGLS_estimate_spatial(coords, y, x, ntree = 500, param_estimate = T,
cov.model = "exponential", nthsize = 20)
RFGLS_predict_sp <- RFGLS_predict(RFGLS.sp,X)
df.all$PM25_raw_fit_RFGLS.sp=RFGLS_predict_sp$predicted
plot(df.all$PM25_raw_fit_RFGLS,df.all$PM25_raw_fit_RFGLS.sp,xlab="RFGLS AR(1) fit",ylab="RFGLS spatial fit")
abline(a=0,b=1,col="red")
# Install required packages if not already installed
# install.packages("spBayes")
# install.packages("ggplot2")
# install.packages("sf")
# install.packages("dplyr")
# Load required packages
library(spBayes)
library(ggplot2)
library(sf)
library(dplyr)
library(rworldmap)
library(geoR)
library(MBA)
library(fields)
library(classInt)
library(geoR)
library(RColorBrewer)
library(spNNGP)
library(BRISC)
source("utils.R")
### dataset 1 ###
data1=read.csv("../data/dataset1.csv")
col.br <- colorRampPalette(c("midnightblue", "cyan", "yellow", "red"))
col.pal <- col.br(5)
col.br2 <- colorRampPalette(c("midnightblue", "white", "red"))
col.pal2 <- col.br2(5)
### plot raw data pounts ###
dev.new()
plot(data1$sx,data1$sy,pch=16,xlab="Easting (m)", ylab="Northing (m)",
col=findColours(classIntervals(data1$y, n=10, style="equal"), col.pal))
plot(data1$sx,data1$sy,pch=16,xlab="Easting (m)", ylab="Northing (m)",
col=findColours(classIntervals(data1$x, n=10, style="equal"), col.pal))
myplot(data1,"y")
myplot(data1,"x")
### linear regression on x
lmobj1=lm(y~x,data=data1)
summary(lmobj1)
data1$res=lmobj1$residuals
myplot(data1,"res",col.br2)
myplot(data1,"res",col.br2)
# Install required packages if not already installed
# install.packages("spBayes")
# install.packages("ggplot2")
# install.packages("sf")
# install.packages("dplyr")
# Load required packages
library(spBayes)
library(ggplot2)
library(sf)
library(dplyr)
library(rworldmap)
library(geoR)
library(MBA)
library(fields)
library(classInt)
library(geoR)
library(RColorBrewer)
library(spNNGP)
library(BRISC)
source("utils.R")
###################################################
### WEF data
###################################################
WEF.dat=read.csv("../data/WEFsmall.csv")
WEF.dat$logDBH=log(WEF.dat$DBH)
WEF.dat$Species=as.factor(WEF.dat$Species)
set.seed(1234)
ind=sample(1:nrow(WEF.dat),100,replace=FALSE)
### holdout data to assess RMSPE ###
WEF.out=WEF.dat[ind,]
WEF.in=WEF.dat[-ind,]
rm("WEF.dat")
### diameter at breast height for the trees
logDBH <- WEF.in$logDBH
coords <- as.matrix(WEF.in[,c("East_m","North_m")])
### logDBH quantile based color coding of the locations
quant <- classIntervals(logDBH, n=5, style="quantile")
brks <- round(quant$brks, 2)
quant <- classIntervals(logDBH, n=5, style="fixed",
fixedBreaks = brks)
quant.col <- findColours(quant, col.pal)
plot(coords, col=quant.col, pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(quant.col, "palette"),
legend=names(attr(quant.col, "table")), bty="n",cex=1.3)
plot(coords, col=quant.col, pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(quant.col, "palette"),
legend=names(attr(quant.col, "table")), bty="n",cex=1.3)
### plot of interpolated surface using mba package ###
surf <- mba.surf(cbind(coords,logDBH), no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
###################################################
### WEF data
###################################################
WEF.dat=read.csv("../data/WEFsmall.csv")
WEF.dat$logDBH=log(WEF.dat$DBH)
WEF.dat$Species=as.factor(WEF.dat$Species)
set.seed(1234)
ind=sample(1:nrow(WEF.dat),100,replace=FALSE)
### holdout data to assess RMSPE ###
WEF.out=WEF.dat[ind,]
WEF.in=WEF.dat[-ind,]
rm("WEF.dat")
### diameter at breast height for the trees
logDBH <- WEF.in$logDBH
coords <- as.matrix(WEF.in[,c("East_m","North_m")])
### logDBH quantile based color coding of the locations
quant <- classIntervals(logDBH, n=5, style="quantile")
brks <- round(quant$brks, 2)
quant <- classIntervals(logDBH, n=5, style="fixed",
fixedBreaks = brks)
quant.col <- findColours(quant, col.pal)
plot(coords, col=quant.col, pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(quant.col, "palette"),
legend=names(attr(quant.col, "table")), bty="n",cex=1.3)
par(mar=c(2,2,2,2))
plot(coords, col=quant.col, pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(quant.col, "palette"),
legend=names(attr(quant.col, "table")), bty="n",cex=1.3)
plot(coords, col=quant.col, pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(quant.col, "palette"),
legend=names(attr(quant.col, "table")), bty="n",cex=1)
par(mar=c(2.5,2,2,2))
plot(coords, col=quant.col, pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
par(mar=c(2,3,2,2))
plot(coords, col=quant.col, pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
par(mar=c(2,3,3,2))
plot(coords, col=quant.col, pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(quant.col, "palette"),
legend=names(attr(quant.col, "table")), bty="n",cex=1)
par(mar=c(2,4,4,2))
plot(coords, col=quant.col, pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(quant.col, "palette"),
legend=names(attr(quant.col, "table")), bty="n",cex=1)
par(mar=c(2,4,2,2))
plot(coords, col=quant.col, pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
par(mar=c(4,4,2,2))
plot(coords, col=quant.col, pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(quant.col, "palette"),
legend=names(attr(quant.col, "table")), bty="n",cex=1)
par(mar=c(4,4,1,1))
plot(coords, col=quant.col, pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(quant.col, "palette"),
legend=names(attr(quant.col, "table")), bty="n",cex=1)
### plot of interpolated surface using mba package ###
surf <- mba.surf(cbind(coords,logDBH), no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
### plot of Species type ###
spnum=as.numeric(WEF.in$Species)
col.pal2 <- col.br(length(unique(spnum)))
plot(coords, col=col.pal2[spnum], pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=col.pal2,
legend=levels(WEF.in$Species), bty="n")
### Linear regression ###
lm.logDBH <- lm(logDBH~Species, data=WEF.in)
summary(lm.logDBH)
logDBH.resid <- resid(lm.logDBH)
surf <- mba.surf(cbind(coords,logDBH.resid), no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
###################################################
### WEF data
###################################################
WEF.dat=read.csv("../data/WEFsmall.csv")
WEF.dat$logDBH=log(WEF.dat$DBH)
WEF.dat$Species=as.factor(WEF.dat$Species)
set.seed(1234)
ind=sample(1:nrow(WEF.dat),100,replace=FALSE)
### holdout data to assess RMSPE ###
WEF.out=WEF.dat[ind,]
WEF.in=WEF.dat[-ind,]
rm("WEF.dat")
### diameter at breast height for the trees
logDBH <- WEF.in$logDBH
coords <- as.matrix(WEF.in[,c("East_m","North_m")])
col.br <- colorRampPalette(c("midnightblue", "cyan", "yellow",  "orange", "red"))
col.pal <- col.br(5)
### logDBH quantile based color coding of the locations
quant <- classIntervals(logDBH, n=5, style="quantile")
brks <- round(quant$brks, 2)
quant <- classIntervals(logDBH, n=5, style="fixed",
fixedBreaks = brks)
quant.col <- findColours(quant, col.pal)
par(mar=c(4,4,1,1))
plot(coords, col=quant.col, pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(quant.col, "palette"),
legend=names(attr(quant.col, "table")), bty="n",cex=1)
### plot of interpolated surface using mba package ###
surf <- mba.surf(cbind(coords,logDBH), no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
### plot of Species type ###
spnum=as.numeric(WEF.in$Species)
col.pal2 <- col.br(length(unique(spnum)))
plot(coords, col=col.pal2[spnum], pch=19, cex=1.5, main="", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=col.pal2,
legend=levels(WEF.in$Species), bty="n")
### Linear regression ###
lm.logDBH <- lm(logDBH~Species, data=WEF.in)
summary(lm.logDBH)
logDBH.resid <- resid(lm.logDBH)
surf <- mba.surf(cbind(coords,logDBH.resid), no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
### variogram of raw data and residuals ###
max.dist=0.5*max(rdist(coords))
bins=20
vario.logDBH <- variog(coords=coords, data=logDBH, uvec=(seq(5, max.dist, length=bins)))
plot(vario.logDBH,pch=16,,ylim=c(0.4,0.6))
vario.logDBH.resid <- variog(coords=coords, data=logDBH.resid, uvec=(seq(0, max.dist, length=bins)))
plot(vario.logDBH.resid,pch=16, ,ylim=c(0.25,0.33))
### spatial mle ###
mle <- likfit(coords=coords, data=logDBH, trend = trend.spatial(~Species,WEF.in), ini.cov.pars=c(0.1,40),
nugget = 0.25,cov.model="exponential",nospatial=TRUE)
mle
## model comparison ##
round(mle$AIC)
round(mle$BIC)
round(mle$nospatial$AIC)
round(mle$nospatial$BIC)
### in sample predictions (signal = TRUE) ##
sp.pred.obj <- krige.conv(coords=coords, data=logDBH,
locations=WEF.in[,c("East_m","North_m")],krige=krige.control(type.krige="OK",obj.model=mle,
trend.d=trend.spatial(~Species,WEF.in),trend.l=trend.spatial(~Species,WEF.in)),output=output.control(signal=TRUE))
sp.pred=sp.pred.obj$predict
logDBH.sp.resid=logDBH-sp.pred
surf <- mba.surf(cbind(coords,logDBH.sp.resid), no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br2(25))
surf <- mba.surf(cbind(coords,logDBH.resid), no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br2(25))
surf <- mba.surf(cbind(coords,logDBH.sp.resid), no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br2(25))
vario.logDBH.sp.resid <- variog(coords=coords, data=logDBH.sp.resid, uvec=(seq(0, max.dist, length=bins)))
plot(vario.logDBH.sp.resid,pch=16)
krig_mlefit=krige.conv(coords=coords, data=logDBH,
locations=WEF.out[,c("East_m","North_m")],krige=krige.control(type.krige="OK",obj.model=mle,
trend.d=trend.spatial(~Species,WEF.in),trend.l=trend.spatial(~Species,WEF.out)),output=output.control(signal=F))
pred_spatial=krig_mlefit$predict
rmspe_spatial=sqrt(mean((pred_spatial-WEF.out$logDBH)^2))
pred_lm=as.vector(as.matrix(trend.spatial(~Species,WEF.out))%*%lm.logDBH$coefficients)
rmspe_lm=sqrt(mean((pred_lm-WEF.out$logDBH)^2))
round(rmspe_spatial,2)
round(rmspe_lm,2)
### CP ###
CI_spatial=pred_spatial+1.96*sqrt(krig_mlefit$krige.var)%*%t(c(-1,1))  ## confidence interval ##
CP_spatial=mean(CI_spatial[,1]<WEF.out$logDBH & CI_spatial[,2]>WEF.out$logDBH) ## coverage probability ##
CIW_spatial=mean(CI_spatial[,2]-CI_spatial[,1]) ## confidence interval width ##
CP_spatial
round(CIW_spatial,1)
N=nrow(WEF.out)
#CI_lm=pred_lm+1.96*summary(lm.logDBH)$sigma*cbind(-rep(1,N),rep(1,N))
CI_lm=predict(lm.logDBH,WEF.out,interval="prediction")[,-1]
CP_lm=mean(CI_lm[,1]<WEF.out$logDBH & CI_lm[,2]>WEF.out$logDBH)
CIW_lm=mean(CI_lm[,2]-CI_lm[,1])
CP_lm
round(CIW_lm,1)
### kriged surface ##
## prediction locations ###
WEF.pred=read.csv("../data/WEFpred.csv")
krigsurf_mlefit=krige.conv(coords=coords, data=logDBH,
locations=WEF.pred[,c("East_m","North_m")],krige=krige.control(type.krige="OK",obj.model=mle,
trend.d=trend.spatial(~Species,WEF.in),trend.l=trend.spatial(~Species,WEF.pred)),output=output.control(signal=F))
pred=krigsurf_mlefit$predict
predsd=sqrt(krigsurf_mlefit$krige.var)
predsurf <- mba.surf(cbind(WEF.pred[,c("East_m","North_m")],pred), no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
image.plot(predsurf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
predsdsurf <- mba.surf(cbind(WEF.pred[,c("East_m","North_m")],predsd), no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
image.plot(predsdsurf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=rev(terrain.colors(25)))
image.plot(predsdsurf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=rev(terrain.colors(25)))
points(WEF.pred[,1:2],col="black",pch=16,cex=0.5)
points(WEF.pred[which(WEF.pred$Species=="GF"),1:2],col="cyan",pch=16,cex=1.2)
##### BCEF data ###
data(BCEF)
BCEF %>% ggplot() +
geom_point(aes(x=x,y=y,col=FCH)) +
scale_color_viridis_c(option = "plasma") +
theme_minimal()
BCEF %>% ggplot() +
geom_point(aes(x=x,y=y,col=PTC)) +
scale_color_viridis_c() +
theme_minimal()
BCEF %>% ggplot() +
geom_point(aes(x=PTC,y=FCH),alpha=0.5)
BCEF %>% ggplot() +
geom_point(aes(x=PTC,y=FCH),alpha=0.2)
BCEF %>% ggplot() +
geom_point(aes(x=PTC,y=FCH),alpha=0.1)
l=lm(FCH ~ PTC, data=BCEF)
l.pred=predict(l,newdata=BCEF)
plot(BCEF$PTC,BCEF$FCH)
points(BCEF$PTC,l.pred,col="red")
r=randomForest(FCH ~ PTC, data=BCEF)
r.pred=predict(r,newdata=BCEF)
l.bcef=lm(FCH~PTC,data=BCEF)
BCEF$res=BCEF$FCH-l.bcef$fitted.values
BCEF %>% ggplot() +
geom_point(aes(x=x,y=y,col=res)) +
scale_color_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0, name = "") +
theme_minimal()
set.seed(1234)
subindex=sample(1:nrow(BCEF),10000)
geo_data <- as.geodata(BCEF[subindex,],
coords.col = c("x", "y"), data.col = "res")
# Create a variogram for the house prices using geoR
max.dist <- 0.75*max(rdist(BCEF[subindex,c("x", "y")]))
bins <- 20
# Plot the variogram
vario1res <- variog(geo_data, uvec=(seq(0, max.dist, length=bins)))
plot(vario1res,pch=16)
### running BRISC (checking results with likfit for small data)
set.seed(1234)
index=sample(1:nrow(BCEF),1000)
BCEF.sub=BCEF[index,]
t0=Sys.time()
br <- BRISC_estimation(unname(as.matrix(BCEF.sub[,c("x","y")])),
BCEF.sub$FCH, cbind(1,BCEF.sub$PTC),n.neighbors = 15)
t1=Sys.time()
print(t1-t0)
mle <- likfit(coords=unname(as.matrix(BCEF.sub[,c("x","y")])), data=BCEF.sub$FCH, trend = trend.spatial(~PTC,BCEF.sub),
ini.cov.pars=c(0.12,0.2),nugget = 0.02,cov.model="exponential",nospatial=TRUE)
br$Beta
br$Theta
mle
1/1.59
set.seed(1234)
index=sample(1:nrow(BCEF),100000)
BCEF.in=BCEF[index,]
BCEF.out=BCEF[-index,]
BCEF.in %>% ggplot() +
geom_point(aes(x=x,y=y,col=PTC)) +
scale_color_viridis_c() +
theme_minimal()
br
### loading the pre-saved BRISC model fit R object
load("bcef_BRISC_fit.Rdata")
br
br$n.neighbors=15 ## increasing the neighbor size for predictions
br.pred <- BRISC_prediction(br,unname(as.matrix(BCEF.out[,c("x","y")])),cbind(1,BCEF.out$PTC))
plot(BCEF.out$FCH,br.pred$prediction,ylab="Prediction",xlab="True")
abline(a=0,b=1,col="red")
BCEF.out$res=BCEF.out$FCH-br.pred$prediction
BCEF.out %>% ggplot() +
geom_point(aes(x=x,y=y,col=res)) +
scale_color_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0, name = "") +
theme_minimal()
plot(BCEF.out$FCH,br.pred$prediction,ylab="Prediction",xlab="True")
abline(a=0,b=1,col="red")
BCEF.out$res=BCEF.out$FCH-br.pred$prediction
sp.rmspe=sqrt(mean(BCEF.out$res^2))
sp.rmspe
sp.CP=mean(br.pred$prediction.ci[,1]<BCEF.out$FCH & br.pred$prediction.ci[,2]>BCEF.out$FCH) ## coverage probability ##
sp.CP
sp.CIW=mean(br.pred$prediction.ci[,2]-br.pred$prediction.ci[,1]) ## confidence interval width ##
sp.CIW
l.bcef=lm(FCH~PTC,data=BCEF.in)
BCEF$res=BCEF$FCH-l.bcef$fitted.values
length(BCEF$FCH)
BCEF.in$res=BCEF.in$FCH-l.bcef$fitted.values
lm.pred=predict(l.bcef, newdata = BCEF.out, interval = "prediction")
plot(BCEF.out$FCH,lm.pred[,1],ylab="Prediction",xlab="True")## scatterplot
abline(a=0,b=1,col="red")
lm.rmspe=sqrt(mean((BCEF.out$FCH-lm.pred[,1])^2))
lm.rmspe
lm.CP=mean(lm.pred[,2]<BCEF.out$FCH & lm.pred[,3]>BCEF.out$FCH) ## coverage probability ##
lm.CP
lm.CIW=mean(lm.pred[,3]-lm.pred[,2]) ## confidence interval width ##
lm.CIW
